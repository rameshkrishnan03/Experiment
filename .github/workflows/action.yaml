# This workflow installs the latest version of OCI CLI and configures the OCI CLI configuration file
# with an API token for the Oracle Cloud (cloud.oracle.com). OCI Resource Manager is used to manage the terraform and tfstate file.
# this workflow will run `terraform init`, and `terraform plan`. On successful pull request merge `terraform apply` will be executed.


on:

  workflow_call:
    inputs:
      PROVIDER_NAME:
        type: string
      BRANCH_NAME:
        type: string
      STACK_NAME:
        type: string
      WORKING_DIRECTORY:
        type: string
      REPO_URL:
        type: string
      TF_VERSION:
        type: string
      # TF_JSON:
      #   type: string

    secrets:
      USER_OCID:
        required: true
      FINGERPRINT:
        required: true
      COMPARTMENT_OCID:
        required: true
      REGION:
        required: true
      TENANCY_OCID:
        required: true
      PRIVATE_KEY_FILE:
        required: true
      PAT:
        required: true
env:

  # ---------------------------------------------
  # Source Provider Details
  # ---------------------------------------------

  PROVIDER_NAME: ${{ inputs.PROVIDER_NAME }}
  REGION: ${{ inputs.REGION }}
  BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
  STACK_NAME: ${{ inputs.STACK_NAME }}
  WORKING_DIRECTORY: ${{ inputs.WORKING_DIRECTORY }}
  REPO_URL: ${{ inputs.REPO_URL }}
  TF_VERSION: ${{ inputs.TF_VERSION }}
  # TF_JSON: ${{ inputs.TF_JSON }}
  
# ---------------------------------------------
# Permissions
# ---------------------------------------------

permissions:
  contents: write

jobs:
  STACK:
    runs-on: ubuntu-latest

    steps:
      # ---------------------------------------------
      # Checkout current repository
      # ---------------------------------------------

      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: 'dev'

      # ---------------------------------------------
      #  Checkout the repository from caller
      # ---------------------------------------------

      - name: checkout "${{ github.event.client_payload.clone_repo }}"
        uses: actions/checkout@v3
        with:
          repository: "${{ github.event.client_payload.clone_repo }}"
          path: "${{ github.event.client_payload.local_path }}"
          token: "${{ secrets.PAT }}"

      # ---------------------------------------------
      #  Remove git config files
      # ---------------------------------------------

      - name: 'Remove git config files'
        env:
          local_path: ${{ github.event.client_payload.local_path }}
        run: |
          rm -rf $local_path/.git


      # ---------------------------------------------
      #  Writing config files
      # ---------------------------------------------

      - name: 'Writing config files'
        run: |
          rm -rf ~/.oci
          mkdir ~/.oci
          cd ~/.oci
          echo "[DEFAULT]" >> config
          echo "user=${{secrets.USER_OCID}}" >> config
          echo "fingerprint=${{secrets.FINGERPRINT}}" >> config
          echo "compartment_ocid=${{secrets.COMPARTMENT_OCID}}" >> config
          echo "region=${{secrets.REGION}}" >> config
          echo "tenancy=${{secrets.TENANCY_OCID}}" >> config
          echo "key_file=/home/runner/.oci/key.pem" >> config
          echo "${{secrets.PRIVATE_KEY_FILE}}" > /home/runner/.oci/key.pem
          echo "~/.oci/config file "
          cat ~/.oci/config
          echo " ~/.oci/key.pem file"
          ls -lta ~/.oci
          ls -lta ~
          cd ~
 



      # ---------------------------------------------
      #  Install OCI CLI
      # ---------------------------------------------

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          #exec -l $SHELL
          echo " Fixing file permissions and testing oci"
          cp /home/runner/bin/oci /usr/local/bin/oci
          echo "OCI CLI version"
          oci --version
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/config
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/key.pem
          echo "# ---------------------------------------------"
          echo "#  Authenticating to OCI"
          echo "# ---------------------------------------------"
          /home/runner/bin/oci os ns get
          if [ $? -ne 0 ]; then
            echo "Authentication failed"
            exit 1
          else
            echo "Authentication is successful"
          fi
      
    # ---------------------------------------------
    #  Updating 
    # ---------------------------------------------

      # - name: Add compartment_ocid to JSON
      #   run: |
      #     jq '. + {"compartment_ocid": "value"}' $WORKING_DIRECTORY/tfvars.json > tmp.json
      #     mv tmp.json $WORKING_DIRECTORY/tfvars.json
     
      - name: 'Checking JSON File'
        env:
          WORKING_DIRECTORY: ${{ github.event.client_payload.working_directory }}
          compartment_name: ${{ github.event.client_payload.tf_variables.compartment_name }}
        run: |
          echo '{}' > tmp.json
          echo '${{ toJson(github.event.client_payload.tf_variables) }}' > get_copilot_variables.json
          

          if [ "${{ env.compartment_name }}" == "root" ] || [ "${{ env.compartment_name }}" == "" ]; then
            echo "${{ env.compartment_name }}"
            echo 'compartment_ocid="${{ secrets.TENANCY_OCID }}"' >> $GITHUB_ENV
            echo "Compartment OCID is TENANCY_OCID"
          else
            echo "compartment_ocid=$(/home/runner/bin/oci iam compartment list --name ${{ env.compartment_name }} | jq -r '.data[].id')" >> $GITHUB_ENV
            jq --arg ocid "${{ env.compartment_ocid }}" '.["compartment_ocid"] = $ocid' tmp.json > new.json && mv new.json tmp.json
            echo "Compartment OCID is ${{ env.compartment_ocid }}"
          fi

          jq --arg region "${{secrets.REGION}}" '.["region"] = $region' tmp.json > new.json && mv new.json tmp.json
          jq --arg tenancy_ocid "${{secrets.TENANCY_OCID}}" '.["tenancy_ocid"] = $tenancy_ocid' tmp.json > new.json && mv new.json tmp.json
          jq --arg ocid "${{ env.compartment_ocid }}" '.["compartment_ocid"] = $ocid' tmp.json > new.json
          ls -lrth
          
          if [ -f "$WORKING_DIRECTORY/tfvars.json" ]; then
            jq -s '.[0] * .[1]' $WORKING_DIRECTORY/tfvars.json new.json > updated.json
            mv updated.json $WORKING_DIRECTORY/tfvars.json
            cat $WORKING_DIRECTORY/tfvars.json
            echo "$WORKING_DIRECTORY"
            echo "first IF"
          else
            echo "Existing JSON file not found." 
            mv new.json $WORKING_DIRECTORY/tfvars.json
            cat $WORKING_DIRECTORY/tfvars.json
          fi

      # ---------------------------------------------
      #   Convert JSON to variables.tf 
      # ---------------------------------------------          
      - name: Convert JSON to variables.tf
        env:
          WORKING_DIRECTORY: ${{ github.event.client_payload.working_directory }}
        run: |
          touch $WORKING_DIRECTORY/terraform.tfvars
          cat << 'EOF' > update_tfvars.sh
          #!/usr/bin/env bash
          set -e

          # Input JSON file and output tfvars file (defaults provided)
          JSON_FILE="${1:-variables.json}"
          TFVARS_FILE="${2:-terraform.tfvars}"

          # Create tfvars file if it doesn't exist
          [ ! -f "$TFVARS_FILE" ] && touch "$TFVARS_FILE"

          # Backup the original tfvars file just in case
          cp "$TFVARS_FILE" "${TFVARS_FILE}.bak"

          # Process each key in the JSON file
          for key in $(jq -r 'keys[]' "$JSON_FILE"); do
            # Determine the type of the JSON value for this key
            val_type=$(jq -r ".\"$key\" | type" "$JSON_FILE")

            if [ "$val_type" == "array" ]; then
              # For arrays, use the compact JSON representation (preserving the brackets)
              new_line="$key = $(jq -c ".\"$key\"" "$JSON_FILE")"
            elif [ "$val_type" == "string" ]; then
              # For strings, add double quotes
              value=$(jq -r ".\"$key\"" "$JSON_FILE")
              new_line="$key = \"$value\""
            elif [ "$val_type" == "boolean" ] || [ "$val_type" == "number" ] || [ "$val_type" == "object" ]; then
              # For booleans, numbers, and objects, use the JSON representation without extra quotes
              new_line="$key = $(jq -c ".\"$key\"" "$JSON_FILE")"
            else
              # Fallback: treat as a string if the type is unexpected
              value=$(jq -r ".\"$key\"" "$JSON_FILE")
              new_line="$key = \"$value\""
            fi

            # Use AWK to update an existing line for the key or append a new one if it doesn't exist
            awk -v key="$key" -v new_line="$new_line" '
              BEGIN { replaced=0 }
              {
                # Match a line that starts with the key (with optional spaces) and an equals sign
                if ($0 ~ "^[[:space:]]*"key"[[:space:]]*=") {
                  print new_line
                  replaced=1
                } else {
                  print
                }
              }
              END {
                if (replaced == 0) {
                  print new_line
                }
              }
            ' "$TFVARS_FILE" > "${TFVARS_FILE}.tmp"

            mv "${TFVARS_FILE}.tmp" "$TFVARS_FILE"
          done

          EOF

          chmod +x update_tfvars.sh
          ./update_tfvars.sh get_copilot_variables.json "$WORKING_DIRECTORY/terraform.tfvars"
          cat "$WORKING_DIRECTORY/terraform.tfvars"
          # cat "$WORKING_DIRECTORY/terraform.tfvars > $WORKING_DIRECTORY/terraform.tfvars
      # - name: Make script executable
      #   run: chmod +x update_defaults.sh

      # Configure Git
      - name: Set up Git configuration
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # ---------------------------------------------
      #  Check for provider
      # ---------------------------------------------

      - name: 'Check for provider'
        run: |
          echo "SOURCE_PROVIDER_ID=$(/home/runner/bin/oci resource-manager configuration-source-provider list \
            --compartment-id ${{ secrets.COMPARTMENT_OCID }} | jq '.data.items[] | select(."display-name"==env.PROVIDER_NAME).id' -r)" >> $GITHUB_ENV
          if [ $? -ne 0 ]; then
            echo "No SOURCE_PROVIDER found with the name ${{env.PROVIDER_NAME}}"
            exit 1
          fi
          echo ${{env.SOURCE_PROVIDER_ID}}

      # ---------------------------------------------
      # Terminate here if no SOURCE_PROVIDER_ID found
      # ---------------------------------------------

      - name: 'Terminate here if no SOURCE_PROVIDER_ID found'
        if: ${{ env.SOURCE_PROVIDER_ID == '' }}
        run: |
          echo "No SOURCE_PROVIDER found with the name ${{env.PROVIDER_NAME}}"
          exit 1


      # ---------------------------------------------
      # Check for existing stack
      # ---------------------------------------------

      - name: 'Check for existing stack'
        run: |
          echo "STACK_ID=$(/home/runner/bin/oci resource-manager stack list --all --compartment-id ${{secrets.COMPARTMENT_OCID}} | jq '.data[] | select(."display-name"==env.STACK_NAME).id' -r)" >> $GITHUB_ENV
          echo "$STACK_ID"

      # ---------------------------------------------
      # Move variables.tf to $WORKING_DIRECTORY
      # ---------------------------------------------

      - name: 'Move variables.tf to $WORKING_DIRECTORY'
        run: |
          
          if [ -d "$WORKING_DIRECTORY/orm" ]; then
            echo "Skipping provider.tf update because 'orm' folder exists."
            rm -rf $WORKING_DIRECTORY/variables.tf $WORKING_DIRECTORY/provider.tf tmp.json install.sh
            cp $WORKING_DIRECTORY/orm/variables.tf $WORKING_DIRECTORY/orm/provider.tf $WORKING_DIRECTORY
          else
            sed -i '/provider "oci"/,/}/ { /\(tenancy_ocid\|user_ocid\|fingerprint\|private_key_path\|private_key_password\|api_private_key\|api_signing_key\)/I d }' "$WORKING_DIRECTORY"/*.tf
            # sed -i '/provider "oci"/,/}/ { /\(tenancy_ocid\|user_ocid\|fingerprint\|private_key_path\|private_key_password\)/d }' "$WORKING_DIRECTORY/provider.tf"
            # sed -i '/\(tenancy_ocid\|user_ocid\|fingerprint\|private_key_path\|private_key_password\)/d' $WORKING_DIRECTORY/provider.tf
            # echo "provider "oci" {" > $WORKING_DIRECTORY/provider.tf
            # echo "region = var.region" >> $WORKING_DIRECTORY/provider.tf
            # echo "}" >> $WORKING_DIRECTORY/provider.tf
            # echo "provider.tf has been created/overwritten."
          fi
      
      # ---------------------------------------------------
      # Commit and push the new file to the dev branch
      # ---------------------------------------------------

      - name: Commit and push changes
        run: |
          pwd
          ls -lrth $WORKING_DIRECTORY
          git add -f "$WORKING_DIRECTORY/terraform.tfvars"
          git add -f $local_path/*
          git commit -m "Add JSON file to dev branch" || echo "No changes to commit" 
          if [ $? -ne 0 ]; then
            echo "No changes to push, continuing with the rest of the script"
            exit 0
          fi
          git push origin $BRANCH_NAME
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          local_path: ${{ github.event.client_payload.local_path }}
          WORKING_DIRECTORY: ${{ github.event.client_payload.working_directory }}

      # ---------------------------------------------
      # Create Stack
      # ---------------------------------------------

      - name: 'Create Stack'
        if: ${{env.STACK_ID == ''}}
        run: |
          echo "STACK_ID=$(/home/runner/bin/oci resource-manager stack create-from-git-provider \
            --compartment-id ${{secrets.COMPARTMENT_OCID}} \
            --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID \
            --config-source-branch-name $BRANCH_NAME \
            --config-source-repository-url $REPO_URL \
            --display-name $STACK_NAME \
            --config-source-working-directory $WORKING_DIRECTORY \
            --terraform-version $TF_VERSION \
            --variables file://$WORKING_DIRECTORY/tfvars.json | jq '.data.id' -r)" >> $GITHUB_ENV
          echo "$STACK_ID"
          if [ $? -ne 0 ]; then
            exit 1
          fi


      # ---------------------------------------------
      # Update Stack
      # ---------------------------------------------
      - name: 'Update Stack  '
        if: ${{env.STACK_ID != ''}}
        run: |
          echo "$STACK_ID"
          /home/runner/bin/oci resource-manager stack update-from-git-provider \
            --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID \
            --stack-id $STACK_ID \
            --config-source-branch-name $BRANCH_NAME \
            --config-source-repository-url $REPO_URL \
            --config-source-working-directory $WORKING_DIRECTORY \
            --terraform-version $TF_VERSION \
            --variables file://$WORKING_DIRECTORY/tfvars.json \
            --wait-for-state ACTIVE \
            --force

      # ---------------------------------------------
      # Terraform Plan for the stack
      # ---------------------------------------------

      - name: 'Terraform Plan for the stack'
        if: ${{env.STACK_ID != ''}}
        run: |
          echo "PLAN_JOB_ID=$(/home/runner/bin/oci resource-manager job create-plan-job \
            --stack-id $STACK_ID | jq '.data.id' -r)" >> $GITHUB_ENV

      # ---------------------------------------------
      # Waiting for Terraform Plan to complete
      # ---------------------------------------------

      - name: 'Waiting for Terraform Plan to complete'
        if: ${{env.PLAN_JOB_ID != ''}}
        run: |
          while true
          do
            JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.PLAN_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
            if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
              echo "Terraform Plan: $JOB_STATUS"
              exit 0
              break
            elif [ "$JOB_STATUS" == "FAILED" ] || [ "$JOB_STATUS" == "CANCELING" ] || [ "$JOB_STATUS" == "CANCELED" ]; then
              echo "Terraform Plan: $JOB_STATUS"
              break
              exit 1
            else
              echo "Terraform Plan: $JOB_STATUS"
              sleep 10
            fi
          done


      # ---------------------------------------------
      # Terraform plan output to GitHub
      # ---------------------------------------------

      - name: "Terraform plan output to GitHub"
        if : ${{env.PLAN_JOB_ID != ''}}
        run: |
          /home/runner/bin/oci resource-manager job get-job-logs-content \
            --job-id $PLAN_JOB_ID --output table > ~/tf_plan_output.log

      # --------------------------------------------------
      # Display the terraform plan on Github console
      # --------------------------------------------------

      - name: "Display the terraform plan on Github console "
        run: |
          JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.PLAN_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
          if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
            echo "Terraform Plan: $JOB_STATUS"
            cat ~/tf_plan_output.log
          else
            echo "Terraform Plan: $JOB_STATUS"
            cat ~/tf_plan_output.log
            exit 1
          fi




      # --------------------------------------------------
      # Create a script to validate tf plan
      # --------------------------------------------------

      - name: "Create a script to validate tf plan"
        run: |
          echo '#!/bin/sh' > ~/validate_tfplan.sh
          echo 'plan=$(grep -c "No changes. Infrastructure is up-to-date\|No changes. Your infrastructure matches the configuration" ~/tf_plan_output.log)' >> ~/validate_tfplan.sh  
          echo 'if [ ${plan} -ne 0 ]' >> ~/validate_tfplan.sh
          echo 'then' >> ~/validate_tfplan.sh
          echo 'echo yes' >> ~/validate_tfplan.sh
          echo 'else' >> ~/validate_tfplan.sh
          echo 'echo no' >> ~/validate_tfplan.sh
          echo 'fi' >> ~/validate_tfplan.sh
          cat ~/validate_tfplan.sh
          chmod 755 ~/validate_tfplan.sh
      
      # --------------------------------------------------
      # Validate  ####
      # --------------------------------------------------


      - name: "Validate"
        run: echo "SKIP_TF_APPLY=$(sh ~/validate_tfplan.sh)" >> $GITHUB_ENV
      
      # --------------------------------------------------
      # SKIP_APPLY from env variables is
      # --------------------------------------------------

      - name: "SKIP_APPLY from env variables is "
        run: echo "${{env.SKIP_TF_APPLY}}"


      # --------------------------------------------------
      # Terraform Apply for the stack   ####
      # --------------------------------------------------

      - name: 'Terraform Apply for the stack'
        if: ${{env.PLAN_JOB_ID != '' && env.SKIP_TF_APPLY == 'no' }}
        run: |
          echo "APPLY_JOB_ID=$(/home/runner/bin/oci resource-manager job create-apply-job \
            --execution-plan-strategy FROM_PLAN_JOB_ID \
            --execution-plan-job-id $PLAN_JOB_ID \
            --stack-id $STACK_ID \
              | jq '.data.id' -r)" >> $GITHUB_ENV

      # --------------------------------------------------
      #  Wait for Terraform Apply to complete  
      # --------------------------------------------------

      - name: 'Wait for Terraform Apply to complete'
        if: ${{env.APPLY_JOB_ID != ''}}
        run: |
          while true
          do
            JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.APPLY_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
            if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
              echo "Terraform Apply: $JOB_STATUS"
              break
            elif [ "$JOB_STATUS" == "FAILED" ] || [ "$JOB_STATUS" == "CANCELING" ] || [ "$JOB_STATUS" == "CANCELED" ]; then
              echo "Terraform Apply: $JOB_STATUS"
              break
              exit 1
            else
              echo "Terraform Apply: $JOB_STATUS"
              sleep 30
            fi
          done

      # --------------------------------------------------
      # Saving the terraform apply output to GitHub 
      # --------------------------------------------------

      - name: 'Saving the terraform apply output to GitHub'
        if : ${{env.APPLY_JOB_ID != ''}}
        run: |
          /home/runner/bin/oci resource-manager job get-job-logs-content \
            --job-id $APPLY_JOB_ID --output table > ~/tf_apply_output.log

      # --------------------------------------------------
      # Display the terraform apply output on console
      # --------------------------------------------------
    
      - name: "Display the terraform apply output on GitHub console"
        if : ${{env.APPLY_JOB_ID != ''}}
        run: |
          JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.APPLY_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
          if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
            echo "Terraform apply: $JOB_STATUS"
            cat ~/tf_apply_output.log
            exit 0
          elif [ "$JOB_STATUS" == "FAILED" ]; then
            echo "Terraform apply: $JOB_STATUS"
            cat ~/tf_apply_output.log
            exit 1
          elif [ "$JOB_STATUS" == "IN_PROGRESS"] || ["$JOB_STATUS" == "ACCEPTED"] || ["$JOB_STATUS" == "CANCELING" ]; then
            echo "Terraform apply: $JOB_STATUS"
            cat ~/tf_apply_output.log
          else
            echo "Your Job is cancelled"
          fi
